#$Id: README,v 1.5 2007/08/24 18:25:11 bpbuild Exp $

==========================================
Setting up a Biopackages build environment
==========================================

The basic procedure for setting up a new development machine is as follows. Eventually this will all be included in the setup_new_node script as an interactive, but for the time being it must be done manually:

1) Enable the RPMForge repository (we depend on them). We provide configuration RPMs for them on platforms we suppoer, but since we do not yet support all of their platforms, you can just install theirs. The respective RPMs can be found through http://apt.sw.be. Some examples include:
   # sudo rpm -Uvh http://apt.sw.be/fedora/5/en/x86_64/dries/RPMS/rpmforge-release-0.2-2.2.fc5.rf.x86_64.rpm	#Fedora Core 5, x86_64
   # sudo rpm -Uvh http://apt.sw.be/fedora/2/en/i386/dag/RPMS/rpmforge-release-0.3.6-1.fc2.rf.i386.rpm		#Fedora Core 2, i386
   # sudo rpm -Uvh http://apt.sw.be/redhat/el5/en/i386/dag/RPMS/rpmforge-release-0.3.6-1.el5.rf.i386.rpm	#CentOS 5, i386
   # sudo rpm -Uvh http://apt.sw.be/redhat/el4/en/x86_64/dag/RPMS/rpmforge-release-0.3.6-1.el4.rf.x86_64.rpm	#CentOS 4, x86_64

2) Install various yum dependencies:
   # sudo yum -y install cvs perl-DateManip rpm-build

3) Install requirements to build in the biopackages environments:
   # sudo rpm -Uvh http://www.biopackages.net/stable/nodistro/noarch/biopackages-1.0.1-1.16.noarch.rpm http://www.biopackages.net/stable/nodistro/noarch/usr-local-bin-perl-1.0-1.3.noarch.rpm

4) CVS checkout code from sourceforge. For simplicity, check it out to /usr/src/biopackages, though I am in the process of making this variable. Replace $builduser and $buildgroup with the name of the user and group that you will be building with on your system. Replace $sfuser with your sourceforge username:
   # echo "CVS_RSH=ssh" >> ~$builduser/.bashrc && export CVS_RSH=ssh && cd /usr/src && sudo chown $builduser:$buildgroup /usr/src && sudo -H -u $builduser cvs -z 3 -d : ext:$sfuser@biopackages.cvs.sourceforge.net:/cvsroot/biopackages co -P biopackages && cd /usr/src/biopackages

  We also support anonymous CVS checkout as follows:
   # echo "CVS_RSH=ssh" >> ~$builduser/.bashrc && export CVS_RSH=ssh && cd /usr/src && sudo chown $builduser:$buildgroup /usr/src && sudo -H -u $builduser cvs -z3 -d:pserver:anonymous@biopackages.cvs.sourceforge.net:/cvsroot/biopackages co -P biopackages && cd /usr/src/biopackages

5) In /usr/src/biopackages, edit Makefile.conf to specify:
 a) SYNCUSER if you have a RSYNC account with us (internal developers). If you do not have an RSYNC account, leave it as the default SYNCUSER=anonymous. (i.e. SYNCUSER=jordan for the RSYNC user jordan)
 b) DISTRO for your distribution. (i.e. DISTRO=centos for CentOS, or DISTRO=fc for Fedora Core)
 c) DISTRO_VER for your distribution version. (i.e. DISTRO_VER=5 for Fedora Core 5, or DISTRO_VER=4 for CentOS 4)
 d) DISTRO_ARCH=i386 or DISTRO_ARCH=x86_64, depending on the architecture of distribution you have installed.

6) In Makefile.conf, change ENABLE_LARGE=no to ENABLE_LARGE=yes if you need large sources. These are sources greater than 10mb and total around 8.6gb. You should avoid these unless you specifically need them (they are disabled by default).

7) Execute a 'make prep' , which should setup your directory structure, update cvs and hit our RSYNC server to grab all of the SOURCES. 
 -> If you have specified a CVS account, enter your sourceforge password when prompted. 
 ->If you have specified a SYNCUSER other than anonymous in Makefile.conf, enter your RSYNC password when prompted during this step.




This should get everything set up for building (hopefully). Next start is to start building RPMs. If you our documentation on the Sourceforge wiki is too bad to understand (which it likely is), let me know and I can give you the tutorial later on -- which is good, cause like this email forces me to do documentation. The basic rundown of use our system:

1) Turn spec.in into spec:
  # make foo.spec
2) Build from spec file:
  # make foo.built

A key feature of our system is the ability to do recursive builds, which builds and install all package dependencies and then builds and install the top-level packages. This is done with make foo.rbuilt, but note that this will install packages which will dirty your system so should only be done on machines that you can destroy (i.e. virtual machines). This also requires sudo.

Hope this is a good starting point. I am happy to give you more details as this is a great opportunity for me to fine-tune the system and update the wiki. Feel free email me/the list, or message me on AIM @ jordanmendler. Also, please point out any issues you have with our systems as the support for external users is still beta.












1. SETTING UP THE ENVIRONMENT

Run 'make prep'.  This will overwrite ~/.rpmmacros with a version
that will make the biopackages checkout top-level directory your
default rpm build directory.  If you're not happy with this,
create a new user just for doing builds -- this setup is unlikely
to change.

2. AUTOMATICALLY CREATING SPEC FILES

  A. For Perl modules from CPAN.
  Not documented yet.  It can be done.  Read the Makefile for hints

3. MANUALLY CREATING SPEC FILES

A few rules for creating new specfiles.  The purpose of these is
to ensure the RPM package release numbers stay in sync with the
CVS version.  Technically, what's happening is the RCS tag '$ Id $'
is being sniffed to produce the RPM release number.

  A. DO NOT CREATE .spec FILES.  Create .spec.in files instead.
  The reason for this is that we need to do some token
  replacement on the file to do the CVS version linking.

  B. At the top of every .spec.in, add a line like this:

       #$Id: README,v 1.5 2007/08/24 18:25:11 bpbuild Exp $

  C. Set the RPM 'Release' key to '%{revision}-%{distro}'.  E.g.,

       Release: %{revision}-%{distro}

     If your CVS version is 1.1, the .spec file generated from
     the .spec.in file will be 1.1-%{distro}.

     The %{distro} tag is a biopackages-specific RPM macro that
     appends the architcture, date, OS abbreviation, and 'bp'
     biopackages identifier to the end of the RPM file resulting
     from the build.  While this isn't absolutely necessary, it
     is recommended because it allows all biopackages packages a
     consistent naming style.

When you have finished your .spec.in file, run "make specs".
This target iterates over all .spec.in files and generates their
corresponding .spec files.

4. BUILDING

You shouldn't need to run 'rpmbuild ...' yourself, this is encapsulated
in the 'buildall' make target.  In a nutsuell, this target converts
.spec.in files to .spec files, and in turn .spec files to .built files.
A .built file indicates the spec was successfully compiled on the local
system.  The .built file contains a log of the build process.

Always remember to cvs add and commit all .spec.in files in your SPECS/
directory before building packages for distribution.  This ensures your
rpm released versions are in sync with your CVS file revisions.

Some of the .spec.in files can't be used to create .spec files.  These
few are specs that are platform-specific.  For instance, we only want
to build 'rpm' and 'yum' on the mac, because they're not available.
For centos and fedora we just depend on RedHat to maintain the packages
for us.
