#$Id: README,v 1.6 2007/08/25 09:53:47 bpbuild Exp $

==========================================
Setting up a Biopackages build environment
==========================================

The basic procedure for setting up a new development machine is as follows. Eventually this will all be included in the setup_new_node script as an interactive, but for the time being it must be done manually:

1) Enable the RPMForge repository (we depend on them). We provide configuration RPMs for them on platforms we suppoer, but since we do not yet support all of their platforms, you can just install theirs. The respective RPMs can be found through http://apt.sw.be. Some examples include:
   # sudo rpm -Uvh http://apt.sw.be/fedora/5/en/x86_64/dries/RPMS/rpmforge-release-0.2-2.2.fc5.rf.x86_64.rpm	#Fedora Core 5, x86_64
   # sudo rpm -Uvh http://apt.sw.be/fedora/2/en/i386/dag/RPMS/rpmforge-release-0.3.6-1.fc2.rf.i386.rpm		#Fedora Core 2, i386
   # sudo rpm -Uvh http://apt.sw.be/redhat/el5/en/i386/dag/RPMS/rpmforge-release-0.3.6-1.el5.rf.i386.rpm	#CentOS 5, i386
   # sudo rpm -Uvh http://apt.sw.be/redhat/el4/en/x86_64/dag/RPMS/rpmforge-release-0.3.6-1.el4.rf.x86_64.rpm	#CentOS 4, x86_64

2) Install various yum dependencies:
   # sudo yum -y install cvs perl-DateManip rpm-build

3) Install requirements to build in the biopackages environments:
   # sudo rpm -Uvh http://www.biopackages.net/stable/nodistro/noarch/biopackages-1.0.1-1.16.noarch.rpm http://www.biopackages.net/stable/nodistro/noarch/usr-local-bin-perl-1.0-1.3.noarch.rpm

4) CVS checkout code from sourceforge. For simplicity, check it out to /usr/src/biopackages, though I am in the process of making this variable. Replace $builduser and $buildgroup with the name of the user and group that you will be building with on your system. Replace $sfuser with your sourceforge username:
   # echo "CVS_RSH=ssh" >> ~$builduser/.bashrc && export CVS_RSH=ssh && cd /usr/src && sudo chown $builduser:$buildgroup /usr/src && sudo -H -u $builduser cvs -z 3 -d : ext:$sfuser@biopackages.cvs.sourceforge.net:/cvsroot/biopackages co -P biopackages && cd /usr/src/biopackages

  We also support anonymous CVS checkout as follows:
   # echo "CVS_RSH=ssh" >> ~$builduser/.bashrc && export CVS_RSH=ssh && cd /usr/src && sudo chown $builduser:$buildgroup /usr/src && sudo -H -u $builduser cvs -z3 -d:pserver:anonymous@biopackages.cvs.sourceforge.net:/cvsroot/biopackages co -P biopackages && cd /usr/src/biopackages

5) In /usr/src/biopackages, edit Makefile.conf to specify:
 a) SYNCUSER if you have a RSYNC account with us (internal developers). If you do not have an RSYNC account, leave it as the default SYNCUSER=anonymous. (i.e. SYNCUSER=jordan for the RSYNC user jordan)
 b) DISTRO for your distribution. (i.e. DISTRO=centos for CentOS, or DISTRO=fc for Fedora Core)
 c) DISTRO_VER for your distribution version. (i.e. DISTRO_VER=5 for Fedora Core 5, or DISTRO_VER=4 for CentOS 4)
 d) DISTRO_ARCH=i386 or DISTRO_ARCH=x86_64, depending on the architecture of distribution you have installed.

6) In Makefile.conf, change ENABLE_LARGE=no to ENABLE_LARGE=yes if you need large sources. These are sources greater than 10mb and total around 8.6gb. You should avoid these unless you specifically need them (they are disabled by default).

7) Execute a 'make prep', which should setup your directory structure, update cvs and hit our RSYNC server to grab all of the SOURCES. Be ware that this will overwrite your existing ~/.rpmmacros with biopackages as top-level directory. If you are not happy with this, you should create a new user just for doing build.
 -> If you have specified a CVS account, enter your sourceforge password when prompted. 
 -> If you have specified a SYNCUSER other than anonymous in Makefile.conf, enter your RSYNC password when prompted during this step.


==========================================
Building RPMs in a Biopackages Environment
==========================================

1) Creating SPEC files. 

A) MANUALLY CREATING SPEC FILES

A few rules for creating new specfiles.  The purpose of these is
to ensure the RPM package release numbers stay in sync with the
CVS version.  Technically, what's happening is the RCS tag '$ Id $'
is being sniffed to produce the RPM release number.

  A. DO NOT CREATE .spec FILES.  Create .spec.in files instead.
  The reason for this is that we need to do some token
  replacement on the file to do the CVS version linking.

  B. At the top of every .spec.in, add a line like this:
       #$Id: README,v 1.6 2007/08/25 09:53:47 bpbuild Exp $

     In the spec file, this line will automatically be replaced with something like:
       #$Id: README,v 1.6 2007/08/25 09:53:47 bpbuild Exp $

  C. Set the RPM 'Release' key to '%{revision}.%{distro}'.  E.g.,

       Release: %{revision}.%{distro}

     If your CVS version is 1.1, the .spec file generated from
     the .spec.in file will be 1.1.%{distro}.

     The %{distro} tag is a biopackages-specific RPM macro that
     appends the architcture, date, OS abbreviation, and 'bp'
     biopackages identifier to the end of the RPM file resulting
     from the build.  While this isn't absolutely necessary, it
     is recommended because it allows all biopackages packages a
     consistent naming style.

  D. Additional spec.in functionality
     -> ifdistro and ifdistro_release statements allow for the addition of lines to a spec file based on the distribution version or release. Grep through SPECS/*.spec.in for examples.


When you have finished your .spec.in file, check it into CVS and then run "make specs" or "make foo.spec".
The first target iterates over all .spec.in files and generates their corresponding .spec files, whereas the second generates a spec for a given package -- in this case the package 'foo'.

B) AUTOMATICALLY CREATING SPEC FILES

  A. For Perl modules from CPAN.
  Not documented yet.  It can be done.  Read the Makefile for hints


2) BUILDING RPMs

 a) Building individual packages

   You should not need to run 'rpmbuild ...' yourself, this is encapsulated
in the 'buildall' and '%.built' make targets.  In a nutsuell, this target converts
.spec.in files to .spec files, and then turns .spec files to .built files.
A .built file indicates the spec was successfully compiled on the local
system.  The .built file contains a log of the build process.

  Example: Building bioperl
  # make bioperl.spec		# This step is optional
  # make bioperl.built

 b) Recursively building packages

  A key feature of the Biopackages build environment is the ability to recursively build packages automatically. This allows one to build a top-level packages, and have all of its build and installation dependencies built and installed in the process. This removed the burdensome task of having to build each dependency and dependencies of dependencies individually. This is done by triggering a 'make %.rbuilt' in place of the 'make %.built' from the previous example.

 NOTE: This process will install and attempt to remove many packages and will dirty and contaminate your system. It is vital that you only use recursive building on disposable systems -- ideally virtual machines with a snapshotting feature to allow for quick reverting to a clean system image after builds. This process also requires sudo. You have been warned...

 Example: Building bioperl, recursively (build bioperl, and every package that is required to build and install it)
 # make bioperl.spec		# This step is optional
 # make bioperl.rbuilt

 c) Cluster building packages

 Another feature of the Biopackages build environment is cluster building, which is based on the recursive building process. This is the process of spawing recursive build jobs to multiple builds hosts through Sun Grid Engine, to allow for both the building of a package on multiple platforms and architectures, as well as the ability to add multiple physical nodes to your cluster to scale performance. This is done by submitted a 'make %.cbuilt' on a single submit host, but currently requires a good amount of configuration to get functional (this is currently in the process of being packaged for easy installation). In a nutshell, cluster building allows us to submit a single 'make %.cbuilt' which builds a given package and all of its dependencies on every platform and architecture we support (through virtualization of Sun Grid Engine build nodes).
