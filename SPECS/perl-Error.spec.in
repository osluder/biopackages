#$Id: perl-Error.spec.in,v 1.4 2006/07/15 01:55:21 boconnor Exp $
%define _unpackaged_files_terminate_build 0
Distribution: Custom
Vendor: biopackages.net
Summary: Error/exception handling in an OO-ish way
Name: perl-Error
Version: 0.15009
Release: %{revision}.%{distro}
Packager: allenday@jugular.ctrl.ucla.edu
License: GPL or Artistic
Group: Development/Libraries
Epoch: 0
URL: http://search.cpan.org/dist/Error/
BuildArch: noarch
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRequires: perl, biopackages

Source0: Error-0.15009.tar.gz

%description

NAME
    Error - Error/exception handling in an OO-ish way

DESCRIPTION
    The Error package provides two interfaces. Firstly Error provides
    a procedural interface to exception handling. Secondly Error is a
    base class for errors/exceptions that can either be thrown, for
    subsequent catch, or can simply be recorded.

    Errors in the class Error should not be thrown directly, but the
    user should throw errors from a sub-class of Error

SYNOPSIS

    use Error qw(:try);

    throw Error::Simple( "A simple error");

    sub xyz {
        ...
	record Error::Simple("A simple error")
	    and return;
    }
 
    unlink($file) or throw Error::Simple("$file: $!",$!);

    try {
	do_some_stuff();
	die "error!" if $condition;
	throw Error::Simple -text => "Oops!" if $other_condition;
    }
    catch Error::IO with {
	my $E = shift;
	print STDERR "File ", $E->{'-file'}, " had a problem\n";
    }
    except {
	my $E = shift;
	my $general_handler=sub {send_message $E->{-description}};
	return {
	    UserException1 => $general_handler,
	    UserException2 => $general_handler
	};
    }
    otherwise {
	print STDERR "Well I don't know what to say\n";
    }
    finally {
	close_the_garage_door_already(); # Should be reliable
    }; # Don't forget the trailing ; or you might be surprised

AUTHORS

    Graham Barr <gbarr@pobox.com>

    The code that inspired me to write this was originally written by
    Peter Seibel <peter@weblogic.com> and adapted by Jesse Glick
    <jglick@sig.bsh.com>.

MAINTAINER

    Arun Kumar U <u_arunkumar@yahoo.com>

                            =====================

HOW TO INSTALL IT ?

To install this module, cd to the directory that contains this README
file and type the following:

    perl Makefile.PL
    make test
    make install

To install this module into a specific directory, do:
perl Makefile.PL PREFIX=/name/of/the/directory
...the rest is the same...

Please also read the perlmodinstall man page, if available.

Share and Enjoy !!

Arun Kumar U 
<u_arunkumar@yahoo.com>

-------------------------------------------------------------------------------
    Only wimps use tape backup: *real* men just upload their important 
    stuff on ftp, and let the rest of the world mirror it.
                                                           - Linus Torvalds
-------------------------------------------------------------------------------



%prep
%setup -q -n Error-%{version}

%build
CFLAGS="$RPM_OPT_FLAGS" perl Makefile.PL PREFIX=$RPM_BUILD_ROOT%{_prefix}  < /dev/null
make OPTIMIZE="$RPM_OPT_FLAGS"
make test

%install
rm -rf $RPM_BUILD_ROOT

eval `perl '-V:installarchlib'`
mkdir -p $RPM_BUILD_ROOT$installarchlib
%makeinstall

find $RPM_BUILD_ROOT -type f -a \( -name perllocal.pod -o -name .packlist \
  -o \( -name '*.bs' -a -empty \) \) -exec rm -f {} ';'
find $RPM_BUILD_ROOT -type d -depth -exec rmdir {} 2>/dev/null ';'
chmod -R u+w $RPM_BUILD_ROOT/*

[ -x %{_usr}/lib/rpm/brp-compress ] && %{_usr}/lib/rpm/brp-compress

find $RPM_BUILD_ROOT -type f \
| sed "s@^$RPM_BUILD_ROOT@@g" \
> %{name}-%{version}-%{release}-filelist

eval `perl -V:archname -V:installsitelib -V:installvendorlib -V:installprivlib`
for d in $installsitelib $installvendorlib $installprivlib; do
  [ -z "$d" -o "$d" = "UNKNOWN" -o ! -d "$RPM_BUILD_ROOT$d" ] && continue
  find $RPM_BUILD_ROOT$d/* -type d \
  | grep -v "/$archname\(/auto\)\?$" \
  | sed "s@^$RPM_BUILD_ROOT@%dir @g" \
  >> %{name}-%{version}-%{release}-filelist
done

if [ "$(cat %{name}-%{version}-%{release}-filelist)X" = "X" ] ; then
    echo "ERROR: EMPTY FILE LIST"
    exit 1
fi

%clean
rm -rf $RPM_BUILD_ROOT

%files -f %{name}-%{version}-%{release}-filelist
%defattr(-,root,root,-)

#%changelog
#* Mon May  8 2006 allenday@jugular.ctrl.ucla.edu - 0.15009-%{revision}
#- Specfile autogenerated.
$Log: perl-Error.spec.in,v $
Revision 1.4  2006/07/15 01:55:21  boconnor
I updated the hardcoded /usr directory in all the spec files.  This was to support MacOS which installs all RPMs into /usr/local.  It uses a RPM macro now to make it platform neutral.  I've also updated some other SPEC files to support MacOS, I've done my best to ensure any changes don't affect other platforms negatively

Revision 1.3  2006/05/08 09:53:25  allenday
import

