#$Id: perl-XML-Twig.spec.in,v 1.1 2006/09/21 04:32:25 jmendler Exp $
Distribution: Custom
Vendor: biopackages.net
Summary: XML, The Perl Way
Name: perl-XML-Twig
Version: 3.16
Release: 1.%{distro} 
Packager: allenday@ucla.edu
License: GPL or Artistic
Group: Development/Libraries
URL: http://search.cpan.org/dist/XML-Twig/
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildArch: noarch
BuildRequires: perl, biopackages

Source0: XML-Twig-3.16.tar.gz

%description
NAME

    XML::Twig - Tree interface to XML documents allowing processing chunk
                by chunk of huge documents.

                

SUMMARY (see perldoc XML::Twig for full details)

XML::Twig is (yet another!) XML transformation module. 

Its strong points: can be used to process huge documents while still
being in tree mode; not bound by DOM or SAX, so it is very perlish and
offers a very comprehensive set of methods; simple to use; masking some
of the classic pitfalls of XML processing.

What it doesn't offer: full SAX support (it can export SAX, but only
reads XML), full XPath support (unless you use XML::Twig::XPath), nor
DOM support.

Other drawbacks: it is a big module, and with over 500 methods available
it can be a bit overwhelming. A good starting point is the tutorial at
http://xmltwig.com/xmltwig/tutorial/index.html. In fact the whole
XML::Twig page at http://xmltwig.com/xmltwig/ has plenty of information
to get you started with XML::Twig

TOOLS

XML::Twig comes with a few tools built on top of it:

  xml_pp           XML pretty printer
  xml_grep         XML grep - grep XML files using XML::Twig's subset of XPath
  xml_split        split big XML files
  xml_merge        merge back files created by xml_split
  xml_spellcheck   spellcheck XML files skipping tags


SYNOPSYS

  single-tree mode    
    my $t= XML::Twig->new();
    $t->parsefile( 'doc.xml');
    $t->print;

  chunk mode 
    # print the document, at most one full section is loaded in memory
    my $t= XML::Twig->new( twig_handlers => { section => \&flush});
    $t->parsefile( 'doc.xml');
    $t->flush;
    sub flush { (my $twig, $section)= @_; $twig->flush; }
    
  sub-tree mode 
    # print all section title's in the document,
    # all other elements are ignored (and not stored)
    my $t= XML::Twig->new( 
            twig_roots => { 'section/title' => sub { $_->print, "\n" } }
                         );
    $t->parsefile( 'doc.xml');
    
INSTALLATION

    perl Makefile.PL
    make
    make test
    make install

DEPENDANCIES

    XML::Twig needs XML::Parser (and the expat library) installed
   
    Modules that can enhance XML::Twig are:

    Scalar::Util or WeakRef 
      to avoid memory leaks
    Encode or Text::Iconv or Unicode::Map8 and Unicode::Strings 
      to do encoding conversions
    Tie::IxHash 
      to use the keep_atts_order option
    XML::XPath 
      to use XML::Twig::XPath
    LWP 
      to use parseurl
    HTML::Entities
      to use the html_encode filter

CHANGES

    $Id: perl-XML-Twig.spec.in,v 1.1 2006/09/21 04:32:25 jmendler Exp $

    See the Changes file    

AUTHOR

    Michel Rodriguez (mirod@cpan.org)
    The Twig page is at http://www.xmltwig.com/
    See the XML::Twig tutorial at http://www.xmltwig.com/xmltwig/tutorial/index.html

COPYRIGHT

       Copyright (c) 1999-2004, Michel Rodriguez. All Rights Reserved.
     This module is free software. It may be used, redistributed
     and/or modified under the terms of the Perl Artistic License
          (see http://www.perl.com/perl/misc/Artistic.html)


%prep
%setup -q -n XML-Twig-%{version}

%build
CFLAGS="$RPM_OPT_FLAGS" perl Makefile.PL PREFIX=$RPM_BUILD_ROOT%{_prefix}  < /dev/null
make OPTIMIZE="$RPM_OPT_FLAGS"

%install
rm -rf $RPM_BUILD_ROOT

eval `perl '-V:installarchlib'`
mkdir -p $RPM_BUILD_ROOT$installarchlib
%makeinstall

find $RPM_BUILD_ROOT -type f -a \( -name perllocal.pod -o -name .packlist \
  -o \( -name '*.bs' -a -empty \) \) -exec rm -f {} ';'
find $RPM_BUILD_ROOT -type d -depth -exec rmdir {} 2>/dev/null ';'
chmod -R u+w $RPM_BUILD_ROOT/*

[ -x /usr/lib/rpm/brp-compress ] && /usr/lib/rpm/brp-compress

find $RPM_BUILD_ROOT -type f \
| sed "s@^$RPM_BUILD_ROOT@@g" \
> %{name}-%{version}-%{release}-filelist

eval `perl -V:archname -V:installsitelib -V:installvendorlib -V:installprivlib`
for d in $installsitelib $installvendorlib $installprivlib; do
  [ -z "$d" -o "$d" = "UNKNOWN" -o ! -d "$RPM_BUILD_ROOT$d" ] && continue
  find $RPM_BUILD_ROOT$d/* -type d \
  | grep -v "/$archname\(/auto\)\?$" \
  | sed "s@^$RPM_BUILD_ROOT@%dir @g" \
  >> %{name}-%{version}-%{release}-filelist
done

if [ "$(cat %{name}-%{version}-%{release}-filelist)X" = "X" ] ; then
    echo "ERROR: EMPTY FILE LIST"
    exit 1
fi

%clean
rm -rf $RPM_BUILD_ROOT

%files -f %{name}-%{version}-%{release}-filelist
%defattr(-,root,root,-)

$Log: perl-XML-Twig.spec.in,v $
Revision 1.1  2006/09/21 04:32:25  jmendler
import from testing

