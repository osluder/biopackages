#$Id: perl-Set-Scalar.spec.in,v 1.2 2006/07/15 01:55:22 boconnor Exp $
Distribution: Custom
Vendor: biopackages.net
Summary: Unknown
Name: perl-Set-Scalar
Version: 1.19
Release: %{revision}.%{distro}
Epoch: 1
Packager: allenday@sumo.genetics.ucla.edu
License: GPL or Artistic
Group: Development/Libraries
URL: http://search.cpan.org/dist/Set-Scalar/
BuildArch: noarch
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRequires: perl, biopackages

Source0: Set-Scalar-1.19.tar.gz

%description
This is a long-waited-for (I hope) rewrite of the venerable Set::Scalar
module.  The original 0.00x series culminated in 0.003 back in May 1996,
the 0.004 in October 1998 was just a minor update.

The most egregious problem with the old implementation was that having
complex things such as objects as set members (for example if sets of sets
were wanted) didn't really work.

While this new implementation is more correct, it may be also slower.
Some operations are certainly slower, but some are faster.  It all
depends on your mix of operations.

Displaying sets is not as versatile as with the old implementation,
but then on the other hand I doubt (hope) that anybody ever used the
overly baroque interface anyway.  If, however, I am wrong in this,
please let me know, I'll think of something.  The old interface should
not be revived as such, I think, it was far too clunky.

The "valued sets" concept is now moved to its own subclass,
Set::Scalar::Valued.

(There are two meta-classes, Set::Scalar::Universe and
 Set::Scalar::ValuedUniverse, but do not use them overmuch, as there
 are still some rough edges that may change in future releases.
 Do not use them directly (by instantiating them yourself, for example),
 $set->universe is about the only method that works and will continue
 to work.  Even more internal-use-only are the Set::Scalar::Real and
 Set::Scalar::Virtual.  Do not try to use them directly.
 Their interfaces are left undocumented on purpose.)

The "inverted sets" concept is history, removed, gone, not to return.
You can just use -$set.

Let me know what you think, did I miss anything obvious?  Any old
functionality that I didn't purposefully/accidentally migrate to
the new one?  Could the documentation be better? (a rhetorical question)
Any new functionality you would like to see?  (Please don't say that
you want the Cartesian product: it's a concept from wholly different
world, the ordered sets.  My sets are unordered.)

-- 
Jarkko Hietaniemi <jhi@iki.fi>




%prep
%setup -q -n Set-Scalar-%{version}

%build
CFLAGS="$RPM_OPT_FLAGS" perl Makefile.PL PREFIX=$RPM_BUILD_ROOT%{_prefix}  < /dev/null
make OPTIMIZE="$RPM_OPT_FLAGS"

%install
rm -rf $RPM_BUILD_ROOT

eval `perl '-V:installarchlib'`
mkdir -p $RPM_BUILD_ROOT$installarchlib
%makeinstall

find $RPM_BUILD_ROOT -type f -a \( -name perllocal.pod -o -name .packlist \
  -o \( -name '*.bs' -a -empty \) \) -exec rm -f {} ';'
find $RPM_BUILD_ROOT -type d -depth -exec rmdir {} 2>/dev/null ';'
chmod -R u+w $RPM_BUILD_ROOT/*

[ -x %{_usr}/lib/rpm/brp-compress ] && %{_usr}/lib/rpm/brp-compress

find $RPM_BUILD_ROOT -type f \
| sed "s@^$RPM_BUILD_ROOT@@g" \
> %{name}-%{version}-%{release}-filelist

eval `perl -V:archname -V:installsitelib -V:installvendorlib -V:installprivlib`
for d in $installsitelib $installvendorlib $installprivlib; do
  [ -z "$d" -o "$d" = "UNKNOWN" -o ! -d "$RPM_BUILD_ROOT$d" ] && continue
  find $RPM_BUILD_ROOT$d/* -type d \
  | grep -v "/$archname\(/auto\)\?$" \
  | sed "s@^$RPM_BUILD_ROOT@%dir @g" \
  >> %{name}-%{version}-%{release}-filelist
done

if [ "$(cat %{name}-%{version}-%{release}-filelist)X" = "X" ] ; then
    echo "ERROR: EMPTY FILE LIST"
    exit 1
fi

%clean
rm -rf $RPM_BUILD_ROOT

%files -f %{name}-%{version}-%{release}-filelist
%defattr(-,root,root,-)

%changelog
* Thu Jun 30 2005 allenday@sumo.genetics.ucla.edu - 1.19-20050630
- Specfile autogenerated.
