#$Id: perl-Class-DBI-Pager.spec.in,v 1.4 2006/10/26 00:01:40 bpbuild Exp $
Distribution: Custom
Vendor: biopackages.net
Summary: Unknown
Name: perl-Class-DBI-Pager
Version: 0.06
Release: %{revision}.%{distro}
Packager: allenday@
License: GPL or Artistic
Group: Development/Libraries
URL: http://search.cpan.org/dist/Class-DBI-Pager/
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRequires: perl, biopackages, perl-Data-Page
BuildArch: noarch
Requires: perl-Class-DBI

Source0: Class-DBI-Pager-0.06.tar.gz

%description
NAME
    Class::DBI::Pager - Pager utility for Class::DBI

SYNOPSIS
      package CD;
      use base qw(Class::DBI);
      __PACKAGE__->set_db(...);

      use Class::DBI::Pager;        # just use it

      # then, in client code!
      package main;

      use CD;
      my $pager = CD->pager(20, 1);     # ($items_per_page, $current_page)
      my @disks = $pager->retrieve_all;

DESCRIPTION
    Class::DBI::Pager is a plugin for Class::DBI, which glues Data::Page
    with Class::DBI. This module reduces your work a lot, for example when
    you have to do something like:

      * retrieve objects from a database
      * display objects with 20 items per page

    In addition, your work will be reduced more, when you use
    Template-Toolkit as your templating engine. See the section on "EXAMPLE"
    for details.

EXAMPLE
      # Controller: (MVC's C)
      my $query    = CGI->new;
      my $template = Template->new;

      my $pager    = Film->pager(20, $query->param('page') || 1);
      my $movies   = $pager->retrieve_all;
      $template->process($input, {
          movies => $movies,
          pager  => $pager,
      });

      # View: (MVC's V)
      Matched [% pager.total_entries %] items.

      [% WHILE (movie = movies.next) %]
      Title: [% movie.title | html %]
      [% END %]

      ### navigation like: [1] [2] [3]
      [% FOREACH num = [pager.first_page .. pager.last_page] %]
      [% IF num == pager.current_page %][[% num %]]
      [% ELSE %]<a href="display?page=[% num %]">[[% num %]]</a>[% END %]
      [% END %]

      ### navigation like: prev 20 | next 20
      [% IF pager.previous_page %]
      <a href="display?page=[% pager.previous_page %]">
      prev [% pager.entries_per_page %]</a> |
      [% END %]
      [% IF pager.next_page %]
      <a href="display?page=[% pager.next_page %]">
      next [% pager.entries_per_page %]</a>
      [% END %]

NOTE / TODO
    This modules internally retrieves itertors, then creates "Data::Page"
    object for paging utility. Using SQL clauses "LIMIT" and/or "OFFSET"
    with "DBIx::Pager" might be more memory efficient.

AUTHOR
    Tatsuhiko Miyagawa <miyagawa@bulknews.net>

    Original idea by Tomohiro Ikebe <ikebe@cpan.org>

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

SEE ALSO
    the Class::DBI manpage, the Data::Page manpage



%prep
%setup -q -n Class-DBI-Pager-%{version}

%build
CFLAGS="$RPM_OPT_FLAGS" perl Makefile.PL PREFIX=$RPM_BUILD_ROOT%{_prefix}  < /dev/null
make OPTIMIZE="$RPM_OPT_FLAGS"

%install
rm -rf $RPM_BUILD_ROOT

eval `perl '-V:installarchlib'`
mkdir -p $RPM_BUILD_ROOT$installarchlib
%makeinstall

find $RPM_BUILD_ROOT -type f -a \( -name perllocal.pod -o -name .packlist \
  -o \( -name '*.bs' -a -empty \) \) -exec rm -f {} ';'
find $RPM_BUILD_ROOT -type d -depth -exec rmdir {} 2>/dev/null ';'
chmod -R u+w $RPM_BUILD_ROOT/*

[ -x %{_usr}/lib/rpm/brp-compress ] && %{_usr}/lib/rpm/brp-compress

find $RPM_BUILD_ROOT -type f \
| sed "s@^$RPM_BUILD_ROOT@@g" \
> %{name}-%{version}-%{release}-filelist

eval `perl -V:archname -V:installsitelib -V:installvendorlib -V:installprivlib`
for d in $installsitelib $installvendorlib $installprivlib; do
  [ -z "$d" -o "$d" = "UNKNOWN" -o ! -d "$RPM_BUILD_ROOT$d" ] && continue
  find $RPM_BUILD_ROOT$d/* -type d \
  | grep -v "/$archname\(/auto\)\?$" \
  | sed "s@^$RPM_BUILD_ROOT@%dir @g" \
  >> %{name}-%{version}-%{release}-filelist
done

if [ "$(cat %{name}-%{version}-%{release}-filelist)X" = "X" ] ; then
    echo "ERROR: EMPTY FILE LIST"
    exit 1
fi

%clean
rm -rf $RPM_BUILD_ROOT

%files -f %{name}-%{version}-%{release}-filelist
%defattr(-,root,root,-)

$Log: perl-Class-DBI-Pager.spec.in,v $
Revision 1.4  2006/10/26 00:01:40  bpbuild
missing Requires

Revision 1.3  2006/09/09 06:01:07  jmendler
noarch

Revision 1.2  2006/09/04 10:47:58  boconnor
Updates to deps and also some extra code in the biopackages spec to support strangeness in CentOS on x86_64

Revision 1.1  2006/07/18 05:18:21  boconnor
Added some new spec files. Also added some Darwin-specific conditionals to postgresql-Affxseq.

