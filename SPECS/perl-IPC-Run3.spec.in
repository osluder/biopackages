#$Id: perl-IPC-Run3.spec.in,v 1.2 2006/07/15 01:55:22 boconnor Exp $
Distribution: Custom
Vendor: Custom
Summary: IPC::Run3 - run a subprocess in batch mode (a la system) on Unix, Win32, etc.
Name: perl-IPC-Run3
Version: 0.034
Release: %{revision}.%{distro}
Epoch: 1
Packager: boconnor@ucla.edu
License: GPL or Artistic
Group: Development/Libraries
URL: http://search.cpan.org/~rschupp/IPC-Run3-0.034/
BuildArch: noarch
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRequires: perl, biopackages
Source0: IPC-Run3-%{version}.tar.gz

%description
This module allows you to run a subprocess and redirect stdin, stdout, and/or stderr to files and perl data structures. It aims to satisfy 99% of the need for using system, qx, and open3 with a simple, extremely Perlish API and none of the bloat and rarely used features of IPC::Run.

Speed, simplicity, and portability are paramount. (That's speed of Perl code; which is often much slower than the kind of buffered I/O that this module uses to spool input to and output from the child command.) Disk space is not.
run3(\@cmd, INPUT, OUTPUT, \$err)

Note that passing in a reference to undef explicitly redirects the associated file descriptor for STDIN, STDOUT, or STDERR from or to the local equivalent of /dev/null (this does not pass a closed filehandle). Passing in undef (or not passing a redirection) allows the child to inherit the corresponding STDIN, STDOUT, or STDERR from the parent.

Because the redirects come last, this allows STDOUT and STDERR to default to the parent's by just not specifying them -- a common use case.

Note: This means that:

    run3 \@cmd, undef, \$out;   # Pass on parent's STDIN

does not close the child's STDIN, it passes on the parent's. Use

    run3 \@cmd, \undef, \$out;  # Close child's STDIN

for that. It's not ideal, but it does work.

If the exact same value is passed for $stdout and $stderr, then the child will write both to the same filehandle. In general, this means that

    run3 \@cmd, \undef, "foo.txt", "foo.txt";
    run3 \@cmd, \undef, \$both, \$both;

will DWYM and pass a single file handle to the child for both STDOUT and STDERR, collecting all into $both.

%prep
%setup -q -n IPC-Run3-%{version}

%build
CFLAGS="$RPM_OPT_FLAGS" perl Makefile.PL PREFIX=$RPM_BUILD_ROOT%{_prefix}  < /dev/null
make OPTIMIZE="$RPM_OPT_FLAGS"

%install
rm -rf $RPM_BUILD_ROOT

eval `perl '-V:installarchlib'`
mkdir -p $RPM_BUILD_ROOT$installarchlib
%makeinstall

find $RPM_BUILD_ROOT -type f -a \( -name perllocal.pod -o -name .packlist \
  -o \( -name '*.bs' -a -empty \) \) -exec rm -f {} ';'
find $RPM_BUILD_ROOT -type d -depth -exec rmdir {} 2>/dev/null ';'
chmod -R u+w $RPM_BUILD_ROOT/*

[ -x %{_usr}/lib/rpm/brp-compress ] && %{_usr}/lib/rpm/brp-compress

find $RPM_BUILD_ROOT -type f \
| sed "s@^$RPM_BUILD_ROOT@@g" \
> %{name}-%{version}-%{release}-filelist

eval `perl -V:archname -V:installsitelib -V:installvendorlib -V:installprivlib`
for d in $installsitelib $installvendorlib $installprivlib; do
  [ -z "$d" -o "$d" = "UNKNOWN" -o ! -d "$RPM_BUILD_ROOT$d" ] && continue
  find $RPM_BUILD_ROOT$d/* -type d \
  | grep -v "/$archname\(/auto\)\?$" \
  | sed "s@^$RPM_BUILD_ROOT@%dir @g" \
  >> %{name}-%{version}-%{release}-filelist
done

if [ "$(cat %{name}-%{version}-%{release}-filelist)X" = "X" ] ; then
    echo "ERROR: EMPTY FILE LIST"
    exit 1
fi

%clean
rm -rf $RPM_BUILD_ROOT

%files -f %{name}-%{version}-%{release}-filelist
%defattr(-,root,root,-)

%changelog
* Mon Feb  6 2006 boconnor@ucla.edu - 0.034-1.1
- Specfile autogenerated.
