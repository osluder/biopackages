#$Id: wackamole.spec.in,v 1.7 2007/07/12 20:54:58 bpbuild Exp $
Name: wackamole
Summary: Wackamole is an application that helps with making a cluster highly available.
Version: 2.1.3
Release: %{revision}.%{distro}
License: CNDS Open Source License
URL: http://www.backhand.org/wackamole/
Packager: Jordan Mendler <jmendler@ucla.edu>
Group: Development/Tools
Source: wackamole-%{version}.tar.gz
Patch: wackamole-2.1.3-linux-x86_64.patch
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRequires: gcc, spread, flex, byacc
Requires: spread

%description
What is Wackamole?

Wackamole is an application that helps with making a cluster highly available. It manages a bunch of virtual IPs, that should be available to the outside world at all times. Wackamole ensures that a single machine within a cluster is listening on each virtual IP address that Wackamole manages. If it discovers that particular machines within the cluster are not alive, it will almost immediately ensure that other machines acquire these public IPs. At no time will more than one machine listen on any virtual IP. Wackamole also works toward achieving a balanced distribution of number IPs on the machine within the cluster it manages.
What problems will Wackamole solve, and how is different from other tools?
Wakamole operates on a cluster of tightly connected machines (all on the same LAN). It works by managing a pool of IP addresses that you expect to be available at all times. These IP addresses are virtual (meaning no machine has any of those IPs as its default IP address). Wackamole will work to ensure that all of the IP addresses in the pool are assigned as virtual IPs to the machines in the cluster. No IP address is held by more than one machine and every IP address is available.

This allows you to run a service using multiple DNS RR records without the worry of one of the machines crashing -- if the machine crashes, the virtual IP addresses it was responsible for will be managed by the remaining machines in the cluster.

There is no other software like Wackamole. Wackamole is quite unique in that it operates in a completely peer-to-peer mode within the cluster. Other products that provide the same high-availability guarantees use a "VIP" method. A networking appliance assumes a single virtual IP address and "maps" requests to that IP address to the machines in the cluster. This networking appliance is a single point of failure by itself, so most industry accepted solutions incorporate classic master-slave failover or bonding between two identical appliances. These networking appliances can be:

    * simple commodity servers running user applications to provide high availability,
    * operating system features like IPVS under Linux or similar such features under Windows 2000 and FreeBSD,
    * hardware networking component like Foundry ServerIron, Cisco LocalDirector or other content-aware switch, Cisco Arrowpoint content switched, Extreme Networks' load-balancers and other such hardware products. 

How it works:

Wackamole is an application that runs as root in a cluster to make it highly available. It uses the membership notifications provided by the Spread toolkit to generate a consistent state that is agreed upon among all of the connected Wackamole instances. Wackamole uses this knowledge to ensure that all of the public IP addresses served by the cluster will be covered by exactly one Wackamole instance.

Wackamole works towards achieving a balanced distribution of the clusters IP space between its instances. First, each instance immediately claims its preferred IP address. Then, if the number of virtual IP addresses acquired by any two machines does differ by more than one, Wackamole will work towards making the them differ by one or less. Wackamole has the ability to balance all the IP addresses at once or do it gradually. 

%prep
%setup -n %{name}-%{version} 
%patch -p1

%build
./configure
make all

%install
rm -rf $RPM_BUILD_ROOT
%makeinstall

# Make RPM aware of each type of file
[ -x %{_usr}/lib/rpm/brp-compress ] && %{_usr}/lib/rpm/brp-compress
find %{buildroot} -type f -o -type l | grep -v /man | grep -v /doc | grep -v /etc/ | sed "s@^%{buildroot}@@g" |grep / > %{name}-%{version}-%{release}-filelist
find %{buildroot} -type f -o -type l | grep /etc/ | sed "s@^%{buildroot}@%config @g" >> %{name}-%{version}-%{release}-filelist
find %{buildroot} -type d | grep /etc/ | sed "s@^%{buildroot}@%configdir @g" >> %{name}-%{version}-%{release}-filelist
find %{buildroot} -type f -o -type l | grep /doc | sed "s@^%{buildroot}@%doc @g" >> %{name}-%{version}-%{release}-filelist
find %{buildroot} -type f -o -type l | grep /man | sed "s@^%{buildroot}@%doc @g" >> %{name}-%{version}-%{release}-filelist
find %{buildroot} -type d | grep /doc | sed "s@^%{buildroot}@%docdir @g" >> %{name}-%{version}-%{release}-filelist
find %{buildroot} -type d | grep /man | sed "s@^%{buildroot}@%docdir @g" >> %{name}-%{version}-%{release}-filelist
find %{buildroot} -type d | grep -v /man | grep -v /doc | grep -v /etc/ | sed "s@^%{buildroot}@%dir @g" |grep / >> %{name}-%{version}-%{release}-filelist

%files -f %{name}-%{version}-%{release}-filelist

%clean
rm -rf $RPM_BUILD_ROOT

$Log: wackamole.spec.in,v $
Revision 1.7  2007/07/12 20:54:58  bpbuild
partch for x86_64

Revision 1.6  2007/07/12 20:24:52  bpbuild
requires byacc

Revision 1.5  2007/07/12 20:20:32  bpbuild
requires gnu flex

Revision 1.4  2007/07/12 20:09:05  bpbuild
requires spread

Revision 1.3  2007/07/12 19:57:46  bpbuild
gcc

Revision 1.2  2007/07/12 19:57:23  bpbuild
updated setup name

Revision 1.1  2007/07/12 19:55:12  bpbuild
new spec

